import {
  Injectable,
  HttpException,
  HttpStatus,
  Logger,
  NotFoundException,
} from '@nestjs/common'
import { BillingApiService } from '@/modules/factuZen/services/api.service'
import { CreateFacturaDto } from '@/modules/factuZen/dto/factura.dto'
import { InjectQueue } from '@nestjs/bullmq'
import { QUEUE } from '@/common/constants/queue.const'
import { InjectRepository } from '@nestjs/typeorm'
import { Sale } from '@/modules/sales/domain/sale'
import { Repository } from 'typeorm'

@Injectable()
export class BillingInvoiceService {
  @InjectQueue(QUEUE.WEBHOOK)
  private readonly logger = new Logger(BillingInvoiceService.name)

  @InjectRepository(Sale)
  private readonly saleRepository: Repository<Sale>

  constructor(private readonly billingApiService: BillingApiService) {}

  /**
   * Obtener comprobante por ID (UUID)
   */
  async getComprobanteById(comprobanteId: string): Promise<any> {
    try {
      this.logger.log(`üìã Obteniendo comprobante por ID: ${comprobanteId}`)

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/api/comprobantes/byId/${comprobanteId}`,
        )

      this.logger.log('‚úÖ Comprobante obtenido exitosamente por ID')
      return response
    } catch (error) {
      this.logger.error(
        '‚ùå Error al obtener comprobante por ID:',
        error.message,
      )

      if (error.response?.status === 404) {
        throw new NotFoundException(
          `Comprobante ${comprobanteId} no encontrado`,
        )
      }

      throw new HttpException(
        `Error al obtener comprobante: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  /**
   * Obtener XML de comprobante por ID (UUID)
   */
  async getComprobanteXmlById(comprobanteId: string): Promise<any> {
    try {
      this.logger.log(
        `üìÑ Obteniendo XML del comprobante por ID: ${comprobanteId}`,
      )

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/api/comprobantes/byId/${comprobanteId}/xml`,
        )

      this.logger.log('‚úÖ XML obtenido exitosamente por ID')
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al obtener XML por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(
          `Comprobante ${comprobanteId} no encontrado`,
        )
      }

      throw new HttpException(
        `Error al obtener XML: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  /**
   * Obtener PDF de comprobante por ID (UUID)
   */
  async getComprobantePdfById(comprobanteId: string): Promise<Buffer> {
    try {
      this.logger.log(
        `üìÑ Obteniendo PDF del comprobante por ID: ${comprobanteId}`,
      )

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/api/comprobantes/${comprobanteId}/pdf`,
          null,
          { responseType: 'arraybuffer' }, // Para manejar archivos binarios
        )

      this.logger.log('‚úÖ PDF obtenido exitosamente por ID')
      return Buffer.from(response)
    } catch (error) {
      this.logger.error('‚ùå Error al obtener PDF por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(
          `Comprobante ${comprobanteId} no encontrado`,
        )
      }

      throw new HttpException(
        `Error al obtener PDF: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  /**
   * Obtener estado de comprobante por ID (UUID)
   */
  async getComprobanteEstadoById(comprobanteId?: string | null): Promise<any> {
    try {
      this.logger.log(
        `üìä Obteniendo estado del comprobante por ID: ${comprobanteId}`,
      )

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/comprobantes/${comprobanteId}/estado`,
        )

      // ‚úÖ DEBUG: Verificar la estructura real de la respuesta
      this.logger.debug(
        'üîç Respuesta cruda de la API:',
        JSON.stringify(response),
      )

      // ‚ö†Ô∏è IMPORTANTE: Depende de c√≥mo est√© implementado makeAuthenticatedRequest
      // Si la API devuelve { data: { success, message, data } } o directamente { success, message, data }

      // Opci√≥n 1: Si makeAuthenticatedRequest ya hace response.data
      if (response && response.success) {
        this.logger.log('‚úÖ Estado obtenido exitosamente por ID')
        return response // Retornamos { success, message, data }
      }

      // Opci√≥n 2: Si makeAuthenticatedRequest devuelve la respuesta completa de Axios
      if (response.data && response.data.success) {
        this.logger.log('‚úÖ Estado obtenido exitosamente por ID')
        return response.data // Retornamos { success, message, data }
      }

      // Si no coincide ninguna estructura
      this.logger.warn('‚ö†Ô∏è Estructura de respuesta no reconocida:', response)
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al obtener estado por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(
          `Comprobante ${comprobanteId} no encontrado`,
        )
      }

      throw new HttpException(
        `Error al obtener estado: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  /**
   * Reenviar webhook por ID de comprobante (UUID)
   */
  async resendWebhookById(
    comprobanteId: string,
    callbackUrl?: string,
  ): Promise<any> {
    try {
      this.logger.log(`üîÑ Reenviando webhook por ID: ${comprobanteId}`)

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'POST',
          `/api/comprobantes/${comprobanteId}/resend-webhook`,
          { callbackUrl },
        )

      this.logger.log('‚úÖ Webhook reenviado exitosamente por ID')
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al reenviar webhook por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(
          `Comprobante ${comprobanteId} no encontrado`,
        )
      }

      throw new HttpException(
        `Error al reenviar webhook: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  // Obtener puntos de emisi√≥n
  async getPuntosEmision(): Promise<any[]> {
    try {
      this.logger.log('üìç Obteniendo puntos de emisi√≥n...')

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          '/puntos-emision',
        )

      this.logger.log(
        'üìã Respuesta puntos emisi√≥n:',
        JSON.stringify(response, null, 2),
      )

      if (response.success && response.data?.data?.length > 0) {
        this.logger.log(
          `‚úÖ Se obtuvieron ${response.data.data.length} puntos de emisi√≥n`,
        )
        return response.data.data
      }

      this.logger.warn('‚ö†Ô∏è No se encontraron puntos de emisi√≥n en la respuesta')
      return []
    } catch (error) {
      this.logger.error('‚ùå Error al obtener puntos de emisi√≥n:', error.message)
      this.logger.error('üìã Error response:', error.response?.data)
      this.logger.error('üìã Error status:', error.response?.status)
      return []
    }
  }

  // Crear factura
  async createFactura(
    puntoEmision: string,
    facturaData: CreateFacturaDto,
  ): Promise<any> {
    try {
      this.logger.log(
        `üí≥ Creando factura para punto de emisi√≥n: ${puntoEmision}`,
      )
      this.logger.log('üìã Datos factura:', JSON.stringify(facturaData, null, 2))

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'POST',
          `/comprobantes/factura/${puntoEmision}`,
          facturaData,
          { timeout: 30000 },
        )

      this.logger.log('‚úÖ Factura creada exitosamente')
      this.logger.log(
        'üìã Respuesta factura:',
        JSON.stringify(response, null, 2),
      )
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al crear factura:', error.message)
      this.logger.error('üìã Error response:', error.response?.data)
      this.logger.error('üìã Error status:', error.response?.status)
      this.logger.error('üìã Error config URL:', error.config?.url)

      // Mejorar el mensaje de error seg√∫n el status code
      let errorMessage = 'Error al crear factura'
      switch (error.response?.status) {
        case 404:
          errorMessage =
            'Ruta de facturaci√≥n no encontrada - Verifica el punto de emisi√≥n'
          break
        case 422:
          errorMessage = 'Datos de factura inv√°lidos'
          break
        case 500:
          errorMessage = 'Error interno en la API de facturaci√≥n'
          break
        default:
          errorMessage = `Error al crear factura: ${error.response?.data?.message || error.message}`
      }

      throw new HttpException(
        errorMessage,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  // M√©todo helper para crear factura con datos b√°sicos
  async createSimpleFactura(
    puntoEmision: string,
    clienteData: {
      tipoIdentificacion: string
      razonSocial: string
      identificacion: string
      direccion: string
      email: string
      telefono: string
    },
    productos: {
      codigo: string
      descripcion: string
      cantidad: number
      precioUnitario: number
      ivaPorcentaje: number // porcentaje real: 0, 5, 8, 12, 15
    }[],
    formaPago: string = '01',
  ): Promise<any> {
    this.logger.log(
      `Preparando factura simple para ${productos.length} productos`,
    )

    const now = new Date()
    const ecuadorTime = new Date(now.getTime() - 5 * 60 * 60 * 1000)
    const fechaEmision = ecuadorTime.toISOString().split('T')[0]

    this.logger.log(`üìÖ Fecha de emisi√≥n: ${fechaEmision}`)

    // Opciones de c√≥digo porcentaje SRI seg√∫n la tabla est√°ndar
    const codigoPorcentajeIvaMap: Record<number, number> = {
      0: 0, // IVA 0%
      5: 5, // IVA 5%
      8: 8, // IVA 8%
      12: 2, // IVA 12%
      15: 4, // IVA 15%
    }

    let totalSinImpuestos = 0

    const detalles = productos.map((producto) => {
      const precioTotalDetalle = Number(
        (producto.cantidad * producto.precioUnitario).toFixed(2),
      )
      totalSinImpuestos += precioTotalDetalle

      const codigoPorcentaje =
        codigoPorcentajeIvaMap[producto.ivaPorcentaje] ?? 0

      const impuestos = [
        {
          codigo: 2, // IVA
          codigoPorcentaje: codigoPorcentaje,
          tarifa: producto.ivaPorcentaje,
          baseImponible: precioTotalDetalle,
          valor: Number(
            (precioTotalDetalle * (producto.ivaPorcentaje / 100)).toFixed(2),
          ),
        },
      ]

      return {
        codigoPrincipal: producto.codigo.toString(),
        codigoAuxiliar: producto.codigo.toString(),
        descripcion: producto.descripcion,
        cantidad: producto.cantidad,
        precioUnitario: Number(producto.precioUnitario.toFixed(2)),
        descuento: 0,
        precioTotalSinImpuesto: precioTotalDetalle,
        impuestos,
      }
    })

    totalSinImpuestos = Number(totalSinImpuestos.toFixed(2))

    // Agrupar totalConImpuestos por codigoPorcentaje
    const totalConImpuestosMap: Record<
      number,
      { base: number; valor: number; tarifa: number }
    > = {}
    detalles.forEach((detalle) => {
      detalle.impuestos.forEach((imp) => {
        if (!totalConImpuestosMap[imp.codigoPorcentaje]) {
          totalConImpuestosMap[imp.codigoPorcentaje] = {
            base: 0,
            valor: 0,
            tarifa: imp.tarifa,
          }
        }
        totalConImpuestosMap[imp.codigoPorcentaje].base +=
          detalle.precioTotalSinImpuesto
        totalConImpuestosMap[imp.codigoPorcentaje].valor += imp.valor
      })
    })

    const totalConImpuestos = Object.entries(totalConImpuestosMap).map(
      ([codigoPorcentaje, data]) => ({
        codigo: 2,
        codigoPorcentaje: Number(codigoPorcentaje),
        tarifa: data.tarifa,
        baseImponible: Number(data.base.toFixed(2)),
        valor: Number(data.valor.toFixed(2)),
      }),
    )

    const totalIVA = Number(
      totalConImpuestos.reduce((sum, imp) => sum + imp.valor, 0).toFixed(2),
    )
    const importeTotal = Number((totalSinImpuestos + totalIVA).toFixed(2))

    this.logger.log(
      `üí∞ Totales calculados - Sin impuestos: ${totalSinImpuestos}, IVA: ${totalIVA}, Total: ${importeTotal}`,
    )

    const facturaData: CreateFacturaDto = {
      fechaEmision,
      tipoIdentificacionComprador: clienteData.tipoIdentificacion,
      razonSocialComprador: clienteData.razonSocial,
      identificacionComprador: clienteData.identificacion,
      direccionComprador: clienteData.direccion,
      totalSinImpuestos,
      totalDescuento: 0,
      totalConImpuestos,
      importeTotal,
      pagos: [
        {
          formaPago,
          total: importeTotal,
        },
      ],
      detalles,
      infoAdicional: {
        email: clienteData.email,
        telefono: clienteData.telefono,
      },
    }

    this.logger.log(
      'üìã Datos de factura a enviar:',
      JSON.stringify(facturaData, null, 2),
    )

    return this.createFactura(puntoEmision, facturaData)
  }

  /**
   * Obtener XML de comprobante por clave acceso
   */
  async getComprobanteXmlByClaveAcceso(clave_acceso: string): Promise<any> {
    try {
      this.logger.log(
        `üìÑ Obteniendo XML del comprobante por ID: ${clave_acceso}`,
      )

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/api/comprobantes/byId/${clave_acceso}/xml`,
        )

      this.logger.log('‚úÖ XML obtenido exitosamente por ID')
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al obtener XML por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(`Comprobante ${clave_acceso} no encontrado`)
      }

      throw new HttpException(
        `Error al obtener XML: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  /**
   * Obtener PDF de comprobante por clave acceso
   */
  async getComprobantePdfByClaveAcceso(clave_acceso: string): Promise<Buffer> {
    try {
      this.logger.log(
        `üìÑ Obteniendo PDF del comprobante por ID: ${clave_acceso}`,
      )

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          `/api/comprobantes/${clave_acceso}/pdf`,
          null,
          { responseType: 'arraybuffer' }, // Para manejar archivos binarios
        )

      this.logger.log('‚úÖ PDF obtenido exitosamente por ID')
      return Buffer.from(response)
    } catch (error) {
      this.logger.error('‚ùå Error al obtener PDF por ID:', error.message)

      if (error.response?.status === 404) {
        throw new NotFoundException(`Comprobante ${clave_acceso} no encontrado`)
      }

      throw new HttpException(
        `Error al obtener PDF: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  // M√©todo para listar facturas con filtros
  async getFacturas(filters?: {
    fechaDesde?: string
    fechaHasta?: string
    estado?: string
    cliente?: string
    page?: number
    limit?: number
  }): Promise<any> {
    try {
      this.logger.log('üìÑ Obteniendo lista de facturas...')

      const queryParams = new URLSearchParams()
      if (filters?.fechaDesde)
        queryParams.append('fecha_desde', filters.fechaDesde)
      if (filters?.fechaHasta)
        queryParams.append('fecha_hasta', filters.fechaHasta)
      if (filters?.estado) queryParams.append('estado', filters.estado)
      if (filters?.cliente) queryParams.append('cliente', filters.cliente)
      if (filters?.page) queryParams.append('page', filters.page.toString())
      if (filters?.limit) queryParams.append('limit', filters.limit.toString())

      const endpoint = `/comprobantes/facturas${queryParams.toString() ? `?${queryParams.toString()}` : ''}`

      const response =
        await this.billingApiService.makeAuthenticatedRequest<any>(
          'GET',
          endpoint,
        )

      this.logger.log('‚úÖ Lista de facturas obtenida exitosamente')
      return response
    } catch (error) {
      this.logger.error('‚ùå Error al obtener lista de facturas:', error.message)

      throw new HttpException(
        `Error al obtener lista de facturas: ${error.response?.data?.message || error.message}`,
        error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      )
    }
  }

  async processWebhookResponse(
    saleId: string,
    webhookData: any,
  ): Promise<void> {
    try {
      this.logger.log(`üì• Procesando webhook para venta: ${saleId}`)
      this.logger.log(`üìã Datos webhook:`, JSON.stringify(webhookData, null, 2))

      // Actualizar la venta con los datos del webhook
      await this.saleRepository.update(saleId, {
        estado_sri:
          webhookData.estado || webhookData.success ? 'AUTORIZADA' : 'ERROR',
        clave_acceso:
          webhookData.clave_acceso || webhookData.comprobante_id || null,
      })

      this.logger.log(`‚úÖ Venta ${saleId} actualizada desde webhook`)
    } catch (error) {
      this.logger.error(
        `‚ùå Error procesando webhook para venta ${saleId}:`,
        error.message,
      )
      throw error
    }
  }

  // M√©todo para validar datos de factura antes de enviar
  validateFacturaData(facturaData: CreateFacturaDto): {
    isValid: boolean
    errors: string[]
  } {
    const errors: string[] = []

    // Validar campos obligatorios
    if (!facturaData.fechaEmision)
      errors.push('Fecha de emisi√≥n es obligatoria')
    if (!facturaData.tipoIdentificacionComprador)
      errors.push('Tipo de identificaci√≥n del comprador es obligatorio')
    if (!facturaData.identificacionComprador)
      errors.push('Identificaci√≥n del comprador es obligatoria')
    if (!facturaData.razonSocialComprador)
      errors.push('Raz√≥n social del comprador es obligatoria')
    if (!facturaData.detalles || facturaData.detalles.length === 0)
      errors.push('Debe incluir al menos un detalle')

    // Validar totales
    if (facturaData.totalSinImpuestos < 0)
      errors.push('Total sin impuestos no puede ser negativo')
    if (facturaData.importeTotal <= 0)
      errors.push('Importe total debe ser mayor a cero')

    // Validar detalles
    facturaData.detalles?.forEach((detalle, index) => {
      if (!detalle.descripcion)
        errors.push(`Detalle ${index + 1}: Descripci√≥n es obligatoria`)
      if (detalle.cantidad <= 0)
        errors.push(`Detalle ${index + 1}: Cantidad debe ser mayor a cero`)
      if (detalle.precioUnitario < 0)
        errors.push(
          `Detalle ${index + 1}: Precio unitario no puede ser negativo`,
        )
    })

    // Validar pagos
    if (!facturaData.pagos || facturaData.pagos.length === 0) {
      errors.push('Debe incluir al menos una forma de pago')
    } else {
      const totalPagos = facturaData.pagos.reduce(
        (sum, pago) => sum + pago.total,
        0,
      )
      const diferencia = Math.abs(totalPagos - facturaData.importeTotal)
      if (diferencia > 0.01) {
        // Tolerancia de 1 centavo por redondeos
        errors.push('La suma de pagos debe coincidir con el importe total')
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
    }
  }
}
